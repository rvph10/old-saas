generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  username    String    @unique
  password    String
  firstName   String?
  lastName    String?
  birthDate   DateTime?
  phoneNumber String?

  // Business related fields
  companyName String?
  vatNumber   String?

  // Relations
  role            Role              @relation(fields: [roleId], references: [id])
  roleId          String
  subscription    Subscription?
  billingInfo     BillingInfo?
  loginHistory    LoginHistory[]
  passwordHistory PasswordHistory[]
  devices         UserDevice[]
  refreshTokens   RefreshToken[]

  //Verification
  isEmailVerified    Boolean   @default(false)
  verificationToken  String?   @unique
  verificationExpiry DateTime?
  isPhoneVerified    Boolean   @default(false)

  // Password recovery
  passwordResetToken   String?   @unique
  passwordResetExpires DateTime?

  // 2FA
  twoFactorSecret  String?
  twoFactorEnabled Boolean @default(false)

  // Failed login attempts tracking
  failedLoginAttempts    Int       @default(0)
  lastFailedLoginAttempt DateTime?
  accountLocked          Boolean   @default(false)
  lockExpires            DateTime?

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model RefreshToken {
  id            String    @id @default(uuid())
  token         String    @unique
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  deviceId      String?
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  revokedAt     DateTime?
  revokedReason String?
  userAgent     String?
  ipAddress     String?
  family        String    @db.Uuid
  successive    Boolean   @default(false)

  @@index([userId])
  @@index([token])
  @@index([family])
}

model UserDevice {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  deviceId   String   @unique
  deviceName String
  deviceType String?
  browser    String?
  os         String?
  isTrusted  Boolean  @default(false)
  lastUsedAt DateTime @updatedAt
  createdAt  DateTime @default(now())

  @@index([userId])
}

model PasswordHistory {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  password  String
  createdAt DateTime @default(now())

  @@index([userId])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  permissions Json
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subscription {
  id         String             @id @default(uuid())
  userId     String             @unique
  user       User               @relation(fields: [userId], references: [id])
  planId     String
  plan       Plan               @relation(fields: [planId], references: [id])
  status     SubscriptionStatus
  startDate  DateTime           @default(now())
  endDate    DateTime?
  canceledAt DateTime?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model Plan {
  id            String          @id @default(uuid())
  name          String          @unique
  description   String
  price         Float
  currency      String          @default("EUR")
  interval      BillingInterval
  features      Json
  subscriptions Subscription[]
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model BillingInfo {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  addressLine1 String
  addressLine2 String?
  city         String
  state        String?
  postalCode   String
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model LoginHistory {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ipAddress String
  userAgent String
  success   Boolean
  createdAt DateTime @default(now())
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PENDING
  SUSPENDED
}

enum BillingInterval {
  MONTHLY
  YEARLY
}
